#!/bin/env bash

# version number
VERSION="1.0"

c_red="\033[1;31m"
c_reset="\033[0m"

die () {
	printf "$c_red%s$c_reset\n" "$*" >&2
	exit 1
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

search_anime () {
	# get anime name along with its id
	search=$(printf '%s' "$1" | tr ' ' '-' )

	curl -s "$base_url//search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "$base_url/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_dpage_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	# dub prefix takes the value "-dub" when dub is needed else is empty
	anime_page=$(curl -s "$base_url/$anime_id-$ep_no")

	if printf '%s' "$anime_page" | grep -q "404" ; then
		anime_page=$(curl -s "$base_url/$anime_id-episode-$ep_no")
	fi

	printf '%s' "$anime_page" |
	    sed -n -E 's/^[[:space:]]*<a href="#" rel="100" data-video="([^"]*)".*/\1/p' |
	    sed 's/^/https:/g'
}

decrypt_link() {
    ajax_url='https://gogoplay.io/encrypt-ajax.php'

    #get the id from the url
    video_id=$(printf "%s" "$1" | cut -d\? -f2 | cut -d\& -f1 | sed 's/id=//g')

    #construct ajax parameters
    secret_key='3235373436353338353932393338333936373634363632383739383333323838'
    iv='34323036393133333738303038313335'
    ajax=$(printf "%s" "$video_id" | openssl enc -aes256  -K "$secret_key" -iv "$iv" -a)

    #send the request to the ajax url
    curl -s -H 'x-requested-with:XMLHttpRequest' "$ajax_url" -d "id=$ajax" -d "time=69420691337800813569" | jq -r '.source[].file'
}

get_video_quality() {
	dpage_url="$1"
	video_links=$(decrypt_link "$dpage_url")
	case $quality in
		best)
			video_link=$(printf '%s' "$video_links" | head -n 4 | tail -n 1)
			;;

		worst)
			video_link=$(printf '%s' "$video_links" | head -n 1)
			;;

		*)
			video_link=$(printf '%s' "$video_links" | grep -i "${quality}p" | head -n 1)
			if [ -z "$video_link" ]; then
				err "Current video quality is not available (defaulting to best quality)"
				quality=best
				video_link=$(printf '%s' "$video_links" | head -n 4 | tail -n 1)
			fi
			;;
	esac
	printf '%s' "$video_link"
}

dep_ch () {
	for dep; do
		[[ $(which "$dep") ]] || die "Program '$dep' not found."
	done
}

# get query
get_search_query () {
	if [ -z "$*" ]; then
		read -r query <<< "$(rofi -dmenu -l 0)"
	else
		query=$*
	fi
}

#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*

	declare -A entries

	count=1
	while read -r anime_id; do
		# alternating colors for menu
		entries+=([$count]="$anime_id\n")
		count=$((count+1))
	done <<-EOF
		$search_results
	EOF

	choice=$(echo -e "${entries[@]}" | rofi -dmenu | awk '{print $1}')

	[ -z "$choice" ] && die "Invalid option"

	read -r last_ep_number <<-EOF
	$(search_eps "$choice")
	EOF
}

##################
## Ep selection ##
##################

open_episode () {
	anime_id=$choice
	episode=$(seq 1 "$last_ep_number" | rofi -dmenu)

	[ -z "$episode" ] && exit 0

	dpage_link=$(get_dpage_link "$anime_id" "$episode")
	echo "dpage: $dpage_link"
	video_url=$(get_video_quality "$dpage_link")
	echo "url: $video_url"
	referer_link="https://sbplay2.com"

	echo "$player_fn --http-header-fields=Referer:$referer_link $video_url"

	"$player_fn" --http-header-fields="Referer:$referer_link" "$video_url"
}

############
# Start Up #
############

echo "Ani-cli for rofi $VERSION"

# to clear the colors when exited using SIGINT
trap 'printf "$c_reset"; exit 1' INT HUP

# option parsing
player_fn="mpv" #video player needs to be able to play urls

# Set default quality
quality=best

# check for main dependencies
dep_ch "curl" "sed" "grep" "git" "jq" "openssl" "mpv"

shift $((OPTIND - 1))

########
# main #
########

main() {
	base_url=$(curl -s -L -o /dev/null -w "%{url_effective}\n" https://gogoanime.cm)
	get_search_query "$*"
	search_results=$(search_anime "$query")
	[ -z "$search_results" ] && die "No search results found"
	anime_selection "$search_results"
	while :; do
		open_episode
	done
}

main "$@"
